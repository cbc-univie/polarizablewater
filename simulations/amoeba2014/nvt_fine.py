# This script was generated by OpenMM-Setup on 2021-07-22.

import sys
from openmm import *
from openmm.app import *
from openmm.unit import *
import parmed
sys.path.append('/home/marion/velrep')
from velreporter import VELFile, VELReporter
sys.path.append('/home/marion/software/dipolereporter')
from dipolereporter import *
from inddipolereporter import *
from permdipolereporter import *

cnt = int(sys.argv[1])
pcnt = cnt-1

if cnt == 1:
    rst = f'traj/npt_1.rst'

if cnt > 1:
    rst = f'traj/nvt_fine_{pcnt}.rst'

# Input Files

pdb = PDBFile('hoh_500.pdb')
forcefield = ForceField('amoeba2014.xml')


# System Configuration

nonbondedMethod = PME
nonbondedCutoff = 1.0*nanometers
ewaldErrorTolerance = 0.0005
constraints = None #No SHAKE
rigidWater = False
constraintTolerance = 0.000001
hydrogenMass = 1.0*amu
# Integration Options

dt = 0.0001*picoseconds
temperature = 300*kelvin
friction = 1.0/picosecond
pressure = 1.0*atmospheres
coll_freq = 10.0/picosecond

# Simulation Options

platform = Platform.getPlatformByName('CUDA')
platformProperties = {'Precision': 'mixed'}

topology = pdb.topology
positions = pdb.positions
system = forcefield.createSystem(pdb.topology, nonbondedMethod=PME, nonbondedCutoff=1.0*nanometer,
    ewaldErrorTolerance=ewaldErrorTolerance, vdwCutoff=1.1*nanometer,
    constraints=constraints, rigidWater=rigidWater,
    polarization='mutual',mutualInducedTargetEpsilon=0.00001
    )
#system.addForce(MonteCarloBarostat(pressure, temperature, barostatInterval))
for force in system.getForces():
    if isinstance(force, AmoebaMultipoleForce) or isinstance(force, AmoebaVdwForce) or isinstance(force, AmoebaGeneralizedKirkwoodForce):
        force.setForceGroup(1)
integrator =  MTSLangevinIntegrator(temperature, friction, dt, [(0,2), (1,1)])
integrator.setConstraintTolerance(constraintTolerance)
simulation = Simulation(topology, system, integrator, platform, platformProperties)
simulation.context.setPositions(positions)

steps = 100000
dcdReporter = DCDReporter(f'traj/nvt_fine_{cnt}.dcd', 10000)
velReporter = VELReporter(f'traj/nvt_fine_vel_{cnt}.dcd', 10000)
dataReporter = StateDataReporter(f'out/nvt_fine_{cnt}.out', 10000, totalSteps=steps,
    step=True, progress=True, potentialEnergy=True, kineticEnergy=True, totalEnergy=True,
    temperature=True, volume=True, density=True, separator='\t')
dipoleReporter = DipoleReporter(f'analysis/total_dipoles_fine_{cnt}.dat', 10000)
inddipoleReporter = IndDipoleReporter(f'analysis/induced_dipoles_fine_{cnt}.dat', 10000)
permdipoleReporter = PermDipoleReporter(f'analysis/permanent_dipoles_fine_{cnt}.dat', 10000)

# Prepare the Simulation

print('Building system...')

if cnt > 1:
    with open(rst, 'r') as f:
        simulation.context.setState(XmlSerializer.deserialize(f.read()))

# Minimize and Equilibrate

if cnt == 1:
    with open(rst, 'r') as f:
        simulation.context.setState(XmlSerializer.deserialize(f.read()))
    simulation.currentStep = 0

# Simulate

print('Simulating...')
simulation.reporters.append(dataReporter)
simulation.reporters.append(dcdReporter)
simulation.reporters.append(velReporter)
simulation.reporters.append(dipoleReporter)
simulation.reporters.append(inddipoleReporter)
simulation.reporters.append(permdipoleReporter)
simulation.step(steps)


state = simulation.context.getState( getPositions=True, getVelocities=True )
with open(f'traj/nvt_fine_{cnt}.rst', 'w') as f:
    f.write(XmlSerializer.serialize(state))
